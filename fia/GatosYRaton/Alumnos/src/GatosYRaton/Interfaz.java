/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Interfaz.java
 *
 * Created on 02-sep-2009, 11:15:34
 */

package GatosYRaton;

import java.awt.Color;
import java.awt.Graphics;

/**
 *
 * @author mireia
 */
public class Interfaz extends javax.swing.JFrame {

    Juego m_nuevoJuego;
    boolean fichaSeleccionada;
    boolean fichaMovimiento;
    int posi;
    int posj;
    int px;
    int py;

    /** Creates new form Interfaz */
    public Interfaz(Juego juego) {

        initComponents();
        m_nuevoJuego=juego;
        fichaSeleccionada = false;
        fichaMovimiento = false;
        posi = -1;
        posj = -1;
        px = -1;
        py = -1;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButtonHH = new javax.swing.JButton();
        jButtonHM = new javax.swing.JButton();
        jButtonMM = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Práctica FIA 2008/2009");
        setResizable(false);

        jPanel1.setPreferredSize(new java.awt.Dimension(400, 400));
        jPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel1MouseClicked(evt);
            }
        });
        jPanel1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                jPanel1MouseMoved(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 416, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 399, Short.MAX_VALUE)
        );

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 14));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Selecciona un modo de juego");

        jButtonHH.setText("Jugar con negra");
        jButtonHH.setFocusPainted(false);
        jButtonHH.setRequestFocusEnabled(false);
        jButtonHH.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonHHActionPerformed(evt);
            }
        });

        jButtonHM.setText("Jugar con blancas");
        jButtonHM.setRequestFocusEnabled(false);
        jButtonHM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonHMActionPerformed(evt);
            }
        });

        jButtonMM.setText("Máquina/Máquina");
        jButtonMM.setRequestFocusEnabled(false);
        jButtonMM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMMActionPerformed(evt);
            }
        });

        jTextField1.setBorder(null);

        jTextField2.setBorder(null);

        jMenu2.setText("Archivo");

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem2.setText("Nuevo Juego");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem2);

        jMenuBar2.add(jMenu2);

        setJMenuBar(jMenuBar2);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(39, 39, 39)
                        .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 416, Short.MAX_VALUE)
                        .add(39, 39, 39)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jTextField2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jTextField1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(layout.createSequentialGroup()
                        .add(8, 8, 8)
                        .add(jButtonHH)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jButtonHM)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jButtonMM)))
                .addContainerGap())
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap(149, Short.MAX_VALUE)
                .add(jLabel1)
                .add(155, 155, 155))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jButtonHH)
                            .add(jButtonHM)
                            .add(jButtonMM))
                        .add(18, 18, 18)
                        .add(jLabel1))
                    .add(layout.createSequentialGroup()
                        .add(129, 129, 129)
                        .add(jTextField1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jTextField2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(323, Short.MAX_VALUE))
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap(73, Short.MAX_VALUE)
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 399, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        getAccessibleContext().setAccessibleName("Práctica FIA 2009/2010");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //Función que se ejecuta al pulsar el botón Jugar con negra
    private void jButtonHHActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonHHActionPerformed
        //Debe indicar que el modo de juego es Humano/Humano
        //Esa modalidad es la modalidad 1
        m_nuevoJuego.setJuego(1);
        repaint();
        jButtonHH.setEnabled(false);
        jButtonHM.setEnabled(false);
        jButtonMM.setEnabled(false);
        
        m_nuevoJuego.controlJuego();
        
}//GEN-LAST:event_jButtonHHActionPerformed

    //Función que se ejecuta al pulsar el botón Jugar con blancas
    private void jButtonHMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonHMActionPerformed
        //Debe indicar que el modo de juego es Humano/Máquina
        //Esa modalidad es la modalidad 2
        m_nuevoJuego.setJuego(2);
        repaint();
        jButtonHH.setEnabled(false);
        jButtonHM.setEnabled(false);
        jButtonMM.setEnabled(false);
}//GEN-LAST:event_jButtonHMActionPerformed

    //Función que se ejecuta al pulsar el botón Máquina/Máquina
    private void jButtonMMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMMActionPerformed
        //Debe indicar que el modo de juego es Máquina/Máquina
        //Esa modalidad es la modadlidad 3
        m_nuevoJuego.setJuego(3);
        repaint();
        jButtonHH.setEnabled(false);
        jButtonHM.setEnabled(false);
        jButtonMM.setEnabled(false);
        
        while(m_nuevoJuego.getJugando())
        {
             try {
                    Thread.sleep(500);
                } catch (InterruptedException ex) {}
             
            m_nuevoJuego.controlJuego();
            
            paint(getGraphics());
        }
}//GEN-LAST:event_jButtonMMActionPerformed

    
    //Cuando se mueve el ratón por el panel se ejecuta este evento
    //Dibuja en la ventana la ficha
    private void jPanel1MouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseMoved

        float anchoCasilla, altoCasilla;
        float alturaTablero, anchuraTablero;
        int columna, fila;
        Graphics g;  
           
        Color blanca = new Color(0.95f,0.95f,0.95f);
        Color negra = new Color(0.2f,0.2f,0.2f);
        
        anchuraTablero = jPanel1.getSize().width;
        alturaTablero = jPanel1.getSize().height;

        g = jPanel1.getGraphics();

        //Calcula el tamaño que ocupará cada casilla a patir del tamaño del tablero.
        anchoCasilla = (anchuraTablero)/m_nuevoJuego.m_tablero.tamaño();
        altoCasilla = (alturaTablero)/m_nuevoJuego.m_tablero.tamaño();

       
        //Únicamente tiene que dibujar la ficha si es el turno del jugador humano:
        //y además únicamente, si el juego ha empezado.
        if(m_nuevoJuego.getJugando())
        {
            if((m_nuevoJuego.getModo() == 1 && m_nuevoJuego.getTurno()==2) ||  (m_nuevoJuego.getModo()==2 && m_nuevoJuego.getTurno()==1))
            {
                
                //Si el jugador ya ha seleccionado una ficha para mover
                if(fichaSeleccionada)
                {
                     //Calcula la casilla más cercana
                        //Calcula el tamaño de cada casilla
                          anchoCasilla = (jPanel1.getSize().width)/m_nuevoJuego.m_tablero.tamaño();
                          altoCasilla = (jPanel1.getSize().height)/m_nuevoJuego.m_tablero.tamaño();

                        //Calcula la casilla más cercana en la que se encuentra el ratón
                         columna = (int) ((evt.getX())/anchoCasilla);
                         fila = (int) ((evt.getY())/altoCasilla);
                    
                         fichaMovimiento = true;
                         px = evt.getX();
                         py = evt.getY();
                         
                    repaint();
                }
            }
        }
    }//GEN-LAST:event_jPanel1MouseMoved

    
    //Esta función selecciona e inserta la ficha en el tablero cuando el jugador hace clic
    private void jPanel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseClicked
        float anchoCasilla, altoCasilla, margenAncho;
        int columna, fila;

        //Únicamente tiene que mover la ficha si es el turno del jugador humano:
        //y además únicamente, si el juego ha empezado.
        if(m_nuevoJuego.getJugando())
        {
            if((m_nuevoJuego.getModo()==1 && m_nuevoJuego.getTurno() == 2) ||  (m_nuevoJuego.getModo()==2 && m_nuevoJuego.getTurno()==1))
            {
              //Calcula la casilla en la que se ha hecho clic
                //Calcula el tamaño de cada casilla
                anchoCasilla = (jPanel1.getSize().width)/m_nuevoJuego.m_tablero.tamaño();
                altoCasilla = (jPanel1.getSize().height)/m_nuevoJuego.m_tablero.tamaño();

                //Calcula la casilla más cercana en la que se encuentra el ratón
                columna = (int) ((evt.getX())/anchoCasilla);
                fila = (int) ((evt.getY())/altoCasilla);
                
                //Si hace el segundo clic para dejar la ficha
                if(fichaSeleccionada)
                {
                    //Si el jugador vuelve a dejar la ficha donde estaba
                    if(columna == posj && fila == posi)
                    {
                        //Vuelve a dejar la ficha donde estaba y no cambia de turno porque el jugador no ha movido
                        m_nuevoJuego.m_tablero.cambiarCasilla(columna, fila,  m_nuevoJuego.getTurno());
                        posi= -1;
                        posj = -1;
                        fichaSeleccionada = false;
                        fichaMovimiento = false;
                        repaint();
                        return;
                    }
                    
                    //Si selecciona otra casilla, comprueba que la ficha, antes seleccionada, puede hacer ese movimiento
                    if(m_nuevoJuego.MovimientoBueno(posi, posj, columna, fila, m_nuevoJuego.getTurno())!=-1)
                    {
                            m_nuevoJuego.jugadaHumano(posi, posj, columna, fila, m_nuevoJuego.getTurno());
                            
                            if(m_nuevoJuego.getJugando())
                            {
                                m_nuevoJuego.cambiaTurno();

                                //Si el juego aun no ha terminado y está en modo de juego 2
                                //Humano/Máquina después de poner ficha el humano debe ponerlo la máquina
                                if((m_nuevoJuego.getModo() == 2) || m_nuevoJuego.getModo()==1)
                                {
                                    //Dibuja el tablero con la ficha del jugador 1
                                    paint(getGraphics());
                                    //repaint();
                                    m_nuevoJuego.controlJuego();
                                }
                            }
                            //Ha terminado el movimiento, reinicializa los valores
                            posi= -1;
                            posj = -1;
                            fichaSeleccionada = false;
                            fichaMovimiento = false;
                            repaint();
                            return;
                    }
                    else
                    {
                        m_nuevoJuego.m_mensaje = 4;
                        repaint();
                    }

                }
                
                //Si no hay ninguna ficha seleccionada, es el primer clic de la tirada
                if(!fichaSeleccionada)
                {
                    //Si la ficha es correcta, es decir, pertenece al jugador
                    if(m_nuevoJuego.m_tablero.obtenerCasilla(columna, fila) == m_nuevoJuego.getTurno())
                    {
                        //Comprueba si esa ficha puede hacer un movimiento correcto
                        if(m_nuevoJuego.posibleMovimiento(columna, fila, m_nuevoJuego.getTurno())!=-1)
                        {
                            //Borra la ficha de su posición
                            m_nuevoJuego.m_tablero.cambiarCasilla(columna, fila, 0);
                            m_nuevoJuego.m_mensaje = 1;
                            repaint();
                            fichaSeleccionada = true;
                            posi = fila;
                            posj = columna;
                        }   
                        else
                        {
                            m_nuevoJuego.m_mensaje = 5;
                            repaint();
                        }
                    }  
                }
            }
        }

    }//GEN-LAST:event_jPanel1MouseClicked

    //Opción "Nuevo Juego" del menú Archivo
    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        //Llama a la función que limpia el tablero y establece los parámetros iniciales
        m_nuevoJuego.reiniciarJuego();
        repaint();
        jButtonHH.setEnabled(true);
        jButtonHM.setEnabled(true);
        jButtonMM.setEnabled(true);
    }//GEN-LAST:event_jMenuItem1ActionPerformed


    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //new Interfaz(Juego juego).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonHH;
    private javax.swing.JButton jButtonHM;
    private javax.swing.JButton jButtonMM;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables


    //Dibuja el tablero de juego.
    @Override
    @SuppressWarnings("static-access")
    public void paint(Graphics g)
    {
        float alturaTablero, anchuraTablero;
        float anchoCasilla, altoCasilla;
        int x,y;
        Color blanca = new Color(0.95f,0.95f,0.95f);
        Color negra = new Color(0.2f,0.2f,0.2f);
        
        //Calcula el tamaño que tendrá el tablero. Le resta los márgenes izquierdo y superior respectivamente.
        anchuraTablero = jPanel1.getSize().width;
        alturaTablero = jPanel1.getSize().height;

        //Como estamos sobreescribiendo la función llamamos a la función padre.
        super.paint(g);
        g = jPanel1.getGraphics();

        //Calcula el tamaño que ocupará cada casilla a patir del tamaño del tablero.
        anchoCasilla = (anchuraTablero)/m_nuevoJuego.m_tablero.tamaño();
        altoCasilla = (alturaTablero)/m_nuevoJuego.m_tablero.tamaño();
  
        //Dibuja el tablero.
        g.setColor(Color.BLACK);
         for(int i=0; i<m_nuevoJuego.m_tablero.tamaño();i++)
            for(int j=0; j<m_nuevoJuego.m_tablero.tamaño();j++)
            {
                if(i%2 == 0)
                {
                    if (j%2 != 0)
                    {
                         g.setColor(Color.BLACK);
                         g.fillRect((int) anchoCasilla*(i),(int)altoCasilla*(j),((int)anchoCasilla),((int)altoCasilla));
                    }
                    else
                         {
                         g.setColor(Color.WHITE);
                         g.fillRect((int)anchoCasilla*(i),(int)altoCasilla*(j),((int)anchoCasilla),((int)altoCasilla));
                    }
                }
                else
                    if (j%2 == 0)
                    {
                         g.setColor(Color.BLACK);
                         g.fillRect((int)anchoCasilla*(i),(int)altoCasilla*(j),((int)anchoCasilla),((int)altoCasilla));
                    }
                    else
                         {
                         g.setColor(Color.WHITE);
                         g.fillRect((int)anchoCasilla*(i),(int)altoCasilla*(j),((int)anchoCasilla),((int)altoCasilla));
                    }

            }
       
     
        //Una vez dibujado el tablero, dibuja las fichas del tablero.
        
        //Dibuja cada una de las casillas
        for(int i=0; i<m_nuevoJuego.m_tablero.tamaño();i++)
            for(int j=0; j<m_nuevoJuego.m_tablero.tamaño();j++)
            {
                //Si la casilla pertenece al jugador 1, es una ficha normal blanca
                if(m_nuevoJuego.m_tablero.obtenerCasilla(i, j) == 1)
                      dibujarBlanca(g, i, j);
                else //Si la casilla pertenece al jugador 2, es una ficha normal negra
                    if(m_nuevoJuego.m_tablero.obtenerCasilla(i, j) == 2)
                        dibujarNegra(g,i,j);
                    else //Si la casilla vale 3, es una ficha reina blanca
                        if(m_nuevoJuego.m_tablero.obtenerCasilla(i, j) == 3)
                            dibujarBlanca(g, i, j);
                        else //Si la casilla vale 4, es una ficha reina negra
                             if(m_nuevoJuego.m_tablero.obtenerCasilla(i, j) == 4)
                               dibujarNegra(g,i,j);
  

             }
        EscribeMensaje();
        
        if(fichaMovimiento)
        {
            g.setColor(Color.GRAY);        
            g.fillOval(px,py,((int)anchoCasilla-4),((int)altoCasilla-4));
            g.fillOval(px+5,py+5,((int)anchoCasilla-8),((int)altoCasilla-8));
            if(m_nuevoJuego.getTurno()==1)
                 g.setColor(blanca);
            else
                 g.setColor(negra);
            g.fillOval(px+2,py+2,((int)anchoCasilla-8),((int)altoCasilla-8));
                    
        }
    }

   public void dibujarBlanca(Graphics g, int i, int j)
   {
        float alturaTablero, anchuraTablero;
        float anchoCasilla, altoCasilla;
        
        Color blanca = new Color(0.95f,0.95f,0.95f);
        
        anchuraTablero = jPanel1.getSize().width;
        alturaTablero = jPanel1.getSize().height;

        g = jPanel1.getGraphics();

        //Calcula el tamaño que ocupará cada casilla a patir del tamaño del tablero.
        anchoCasilla = (anchuraTablero)/m_nuevoJuego.m_tablero.tamaño();
        altoCasilla = (alturaTablero)/m_nuevoJuego.m_tablero.tamaño();

        g.setColor(Color.GRAY);        
        g.fillOval((int)anchoCasilla*i,(int)altoCasilla*j,((int)anchoCasilla-4),((int)altoCasilla-4));
        g.fillOval((int)anchoCasilla*i+5,(int)altoCasilla*j+5,((int)anchoCasilla-8),((int)altoCasilla-8));
        g.setColor(blanca);
        g.fillOval((int)anchoCasilla*i+2,(int)altoCasilla*j+2,((int)anchoCasilla-8),((int)altoCasilla-8));
   }
           
   
   public void dibujarNegra(Graphics g, int i, int j)      
   {
        float alturaTablero, anchuraTablero;
        float anchoCasilla, altoCasilla;
        
        Color negra = new Color(0.2f,0.2f,0.2f);
        
        anchuraTablero = jPanel1.getSize().width;
        alturaTablero = jPanel1.getSize().height;

        g = jPanel1.getGraphics();

        //Calcula el tamaño que ocupará cada casilla a patir del tamaño del tablero.
        anchoCasilla = (anchuraTablero)/m_nuevoJuego.m_tablero.tamaño();
        altoCasilla = (alturaTablero)/m_nuevoJuego.m_tablero.tamaño();

        g.setColor(Color.GRAY);        
        g.fillOval((int)anchoCasilla*i,(int)altoCasilla*j,((int)anchoCasilla-4),((int)altoCasilla-4));
        g.fillOval((int)anchoCasilla*i+5,(int)altoCasilla*j+5,((int)anchoCasilla-8),((int)altoCasilla-8));
        g.setColor(negra);
        g.fillOval((int)anchoCasilla*i+2,(int)altoCasilla*j+2,((int)anchoCasilla-8),((int)altoCasilla-8));
   }
           
    public void EscribeMensaje()
    {
        switch (m_nuevoJuego.m_mensaje){
            case 0:  jLabel1.setText("Selecciona un modo de juego");
                     break;
            case 1:  if(m_nuevoJuego.getTurno() == 1)
                        jLabel1.setText("Turno de las blancas");
                     else
                         jLabel1.setText("Turno de la negra");
                     break;
            case 2:  jLabel1.setText("Han ganado las blancas");
                     break;
            case 3:  jLabel1.setText("Ha ganado la negra");
                     break;
            case 4:  jLabel1.setText("Ese movimiento no es correcto");
                     break;
            case 5:  jLabel1.setText("Esa ficha no tiene ningún movimiento posible");
                     break;
            case 6:  jLabel1.setText("Empate!");
                     break;
            default: jLabel1.setText(" ");
                     break;
        }
    }
}
