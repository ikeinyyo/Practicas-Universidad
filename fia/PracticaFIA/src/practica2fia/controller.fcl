FUNCTION_BLOCK aceleracion

VAR_INPUT
    s0 : REAL;
    s1 : REAL;
    s2 : REAL;  
    s3 : REAL;
    s4 : REAL;
    s5 : REAL; 
    s6 : REAL;
    s7 : REAL;
    s8 : REAL;
    sig : REAL;
END_VAR

VAR_OUTPUT
    vel : REAL;
    rot : REAL;
END_VAR

//EJEMPLO de definici贸n NO VINCULANTE. Hacer lo mismo para los 7 sensores restantes
FUZZIFY s0
    TERM near   := (0,1) (0.5,1) (0.9,1) (1,0);
    TERM med    := (1,0)(1.3,1)(1.4,0);
    TERM far    := (1.4,0) (1.5,1);
END_FUZZIFY
FUZZIFY s1
   TERM near   := (0,1) (0.5,1) (0.9,1) (1,0);
    TERM med    := (0.9,0)(1.3,1)(1.4,0);
    TERM far    := (1.3,0) (1.5,1);
END_FUZZIFY
FUZZIFY s2
   TERM near   := (0,1) (0.5,1) (0.9,1) (1,0);
    TERM med    := (0.9,0)(1.3,1)(1.4,0);
    TERM far    := (1.3,0) (1.5,1);
END_FUZZIFY
FUZZIFY s7
  TERM near   := (0,1) (0.5,1) (0.9,1) (1,0);
    TERM med    := (0.9,0)(1.3,1)(1.4,0);
    TERM far    := (1.3,0) (1.5,1);
END_FUZZIFY
FUZZIFY s8
    TERM near   := (0,1) (0.5,1) (0.9,1) (1,0);
    TERM med    := (0.9,0)(1.3,1)(1.4,0);
    TERM far    := (1.3,0) (1.5,1);
END_FUZZIFY
FUZZIFY sig
    TERM izqm   :=    (-180,0) (90,0) (135,1) (180,1);
    TERM izq    :=    (-180,0)(0,0) (60,1) (120,1) (135,0) (180,0);
    TERM cen    :=    (-180,0) (-30,0) (-10,1) (10,1) (30,0) (180,0);
    TERM der    :=    (-180,0) (-135,0) (-120,1) (-60,1) (0,0) (180,0);
    TERM derm   :=    (-180,1) (-135,1) (-90,0) (180,0);
END_FUZZIFY

//EJEMPLO de definici贸n NO VINCULANTE
DEFUZZIFY vel
    TERM fast   := (2,0) (2.5,1);
    TERM med    := (0.75,0) (1.25,1) (2.15,0);
    TERM slow   := (0,1) (0.95,0);
    // Use 'Center Of Gravity' defuzzification method
    METHOD : COG;
    // Default value is 1 (if no rule activates defuzzifier)
    DEFAULT := 1;
END_DEFUZZIFY

//EJEMPLO de definici贸n NO VINCULANTE
DEFUZZIFY rot
    /*TERM izqm   :=    (-180,0) (0,0) (180,1);
    TERM izq    :=    (-180,0)(-90,0) (0,1) (90,1) (180,0);
    TERM cen    :=    (-180,0) (-90,0) (-45,1) (45,1) (90,0);
    TERM der    :=    (-180,0) (-90,1) (0,1) (90,0) (180,0);
    TERM derm   :=    (-180,1) (0,0) (180,0);*/

    /*TERM izqm   :=    (-10,0) (5,0) (10,1);
    TERM izq    :=    (-10,0)(-5,0) (0,1) (5,1) (10,0);
    TERM cen    :=    (-10,0) (-5,0) (-2.5,1) (2.5,1) (5,0);
    TERM der    :=    (-10,0) (-5,1) (0,1) (5,0) (10,0);
    TERM derm   :=    (-10,1) (-5,0) (10,0);*/

    TERM izqm   :=    (-3.14,0) (1.57,0) (2.25,1) (3.14,1);
    TERM izq    :=    (-3.14,0)(0,0) (1,1) (2.0,1) (2.25,0) (3.14,0);
    TERM cen    :=    (-3.14,0) (-0.75,0) (-0.5,1) (0.5,1) (0.75,0) (3.14,0);
    TERM der    :=    (-3.14,0) (-2.25,0) (-2.0,1) (-1,1) (0,0) (3.14,0);
    TERM derm   :=    (-3.14,1) (-2.25,1) (-1.57,0) (3.14,0);

    // Use 'Center Of Gravity' defuzzification method
    METHOD : COG;
    // Default value is 1 (if no rule activates defuzzifier)
    DEFAULT := 0;
END_DEFUZZIFY

//Reglas por defecto
//EJEMPLO de definici贸n de reglas NO VINCULANTE
RULEBLOCK No1
    // Use 'min' for 'and' (also implicit use 'max'
    // for 'or' to fulfill DeMorgan's Law)
    AND : PROD;
    // Use 'min' activation method
    ACT : MIN;
    // Use 'max' accumulation method
    ACCU : MAX;

    //Definir las reglas del SE
    
    //Reglas orientarse a SIG
    RULE 50: IF sig IS izqm AND s1 IS far THEN rot IS izqm;
    RULE 51: IF sig IS izqm AND s1 IS med THEN rot IS izqm;
    
    RULE 52: IF sig IS derm AND s8 IS far THEN rot IS derm;
    RULE 53: IF sig IS derm AND s8 IS med THEN rot IS derm;

    RULE 57: IF sig IS izq AND s1 IS far THEN rot IS izq;
    RULE 58: IF sig IS izq AND s1 IS med THEN rot IS izq;

    RULE 59: IF sig IS der AND s8 IS far THEN rot IS der;
    RULE 60: IF sig IS der AND s8 IS med THEN rot IS der;

    RULE 54: IF sig IS cen AND s0 IS far THEN rot IS cen;
    RULE 55: IF sig IS cen AND s0 IS med THEN rot IS cen;
    //RULE 56: IF sig IS cen THEN rot IS cen;

    
    //Evitar chocar laterales
    RULE 40: IF s1 IS near THEN rot IS derm;
    RULE 41: IF s8 IS near THEN rot IS izqm;

    RULE 42: IF s1 IS med THEN rot IS der;
    RULE 43: IF s8 IS med THEN rot IS izq;

    RULE 45: IF s2 IS near THEN rot IS derm;
    RULE 46: IF s7 IS near THEN rot IS izqm;

    RULE 47: IF s2 IS med THEN rot IS der;
    RULE 48: IF s7 IS med THEN rot IS izq;

    RULE 44: IF s1 IS far AND s8 IS far THEN rot IS cen;
    
    //Control de Velocidad
    RULE 1: IF s0 IS far THEN vel IS med;
    RULE 2: IF s0 IS med THEN vel IS slow;
    RULE 3: IF s0 IS near THEN vel IS slow;

    //RULE 10: IF s0 IS med THEN rot IS cen;

END_RULEBLOCK

END_FUNCTION_BLOCK
